from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
from aiohttp import web
import threading
import json
import os

TOKEN = "–¢–û–ö–ï–ù_–°–Æ–î–ê"

# –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID
IDS_FILE = "saved_ids.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö ID
def load_ids():
    if os.path.exists(IDS_FILE):
        with open(IDS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID
def save_ids(data):
    with open(IDS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

saved_ids = load_ids()

# –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
def get_possible_moves():
    return (
        "üìã –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/info ‚Äî —Ç–≤–æ–π ID –∏ username\n"
        "/id <username> ‚Äî –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:\n"
        "- –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID, –Ω–∞–ø–∏—à–∏ /info\n"
        "- –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø–∏—à–∏ /id @username\n"
        "- –ú–æ–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –≤–º–µ—Å—Ç–æ –∫–æ–º–∞–Ω–¥"
    )

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    saved_ids[str(user.id)] = user.username
    save_ids(saved_ids)

    keyboard = [
        [InlineKeyboardButton("Help", callback_data='help')],
        [InlineKeyboardButton("Info", callback_data='info')],
        [InlineKeyboardButton("ID", callback_data='id')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n{get_possible_moves()}",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    saved_ids[str(user.id)] = user.username
    save_ids(saved_ids)

    await query.answer()

    if query.data == 'help':
        await query.edit_message_text(get_possible_moves())
    elif query.data == 'info':
        await query.edit_message_text(
            f"–¢–≤–æ–π ID: {user.id}\n"
            f"–¢–≤–æ–π username: @{user.username}\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω @uskoglazik, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ ‚Äî –ø–∏—à–∏—Ç–µ."
        )
    elif query.data == 'id':
        await query.edit_message_text(
            "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID:\n"
            "- –°–≤–æ–π: /info\n"
            "- –î—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /id @username"
        )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(get_possible_moves())

# –ö–æ–º–∞–Ω–¥–∞ /info
async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    saved_ids[str(user.id)] = user.username
    save_ids(saved_ids)
    await update.message.reply_text(
        f"–¢–≤–æ–π ID: {user.id}\n"
        f"–¢–≤–æ–π username: @{user.username}\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω @uskoglazik, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ—Ç–µ–Ω–∑–∏–∏ ‚Äî –ø–∏—à–∏—Ç–µ."
    )

# –ö–æ–º–∞–Ω–¥–∞ /id
async def id_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /id @username")
        return

    username = context.args[0].lstrip("@")
    for uid, uname in saved_ids.items():
        if uname and uname.lower() == username.lower():
            await update.message.reply_text(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{uname}: {uid}")
            return

    await update.message.reply_text(f"ID –¥–ª—è @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –±–æ—Ç–æ–º.")

# –ú–∏–Ω–∏-–≤–µ–±—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
async def handle(request):
    return web.Response(text="Bot is running!")

def run_web():
    app = web.Application()
    app.router.add_get("/", handle)
    web.run_app(app, port=8080)

# –ó–∞–ø—É—Å–∫ –≤–µ–±—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=run_web).start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("info", info_command))
app.add_handler(CommandHandler("id", id_command))
app.add_handler(CallbackQueryHandler(button))

app.run_polling()
