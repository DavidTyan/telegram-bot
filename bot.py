import os
import json
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ======
TOKEN = os.getenv("BOT_TOKEN", "8303815205:AAFmhAC2zCC79gGcctIwcs2u5S_yV_ZOFvY")
PORT = int(os.environ.get("PORT", 8080))
IDS_FILE = "saved_ids.json"

# ====== –†–∞–±–æ—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º–∏ ID ======
def load_ids():
    if os.path.exists(IDS_FILE):
        with open(IDS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_ids(data):
    with open(IDS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

saved_ids = load_ids()

# ====== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π ======
def main_keyboard():
    keyboard = [
        [InlineKeyboardButton("Help", callback_data='help')],
        [InlineKeyboardButton("ID", callback_data='id')]
    ]
    return InlineKeyboardMarkup(keyboard)

def id_options_keyboard():
    keyboard = [
        [InlineKeyboardButton("My ID", callback_data='my_id')],
        [InlineKeyboardButton("Other's ID", callback_data='others_id')]
    ]
    return InlineKeyboardMarkup(keyboard)

# ====== –¢–µ–∫—Å—Ç –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ======
def get_possible_moves():
    return (
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/id ‚Äî —É–∑–Ω–∞—Ç—å ID (—Å–≤–æ—ë –∏–ª–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n\n"
        "üí° –°–æ–≤–µ—Ç—ã:\n"
        "- –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID, –Ω–∞–∂–º–∏—Ç–µ My ID\n"
        "- –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–∂–º–∏—Ç–µ Other's ID –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–≥–æ"
    )

# ====== /start ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    saved_ids[str(user.id)] = user.username
    save_ids(saved_ids)
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n{get_possible_moves()}",
        reply_markup=main_keyboard()
    )

# ====== –ö–Ω–æ–ø–∫–∏ ======
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    saved_ids[str(user.id)] = user.username
    save_ids(saved_ids)
    await query.answer()

    if query.data == 'help':
        text = get_possible_moves()
        markup = main_keyboard()
    elif query.data == 'id':
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID:"
        markup = id_options_keyboard()
    elif query.data == 'my_id':
        text = f"–í–∞—à ID: {user.id}\n–í–∞—à username: @{user.username}"
        markup = main_keyboard()
    elif query.data == 'others_id':
        text = "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, **–ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–≥–æ**. –î—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        markup = None  # –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        context.user_data['awaiting_other_id'] = True
    else:
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ."
        markup = main_keyboard()

    await query.edit_message_text(text, reply_markup=markup)

# ====== /help ======
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(get_possible_moves(), reply_markup=main_keyboard())

# ====== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Other's ID ======
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    saved_ids[str(user.id)] = user.username
    save_ids(saved_ids)

    # –ï—Å–ª–∏ –∂–¥–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Other's ID
    if context.user_data.get('awaiting_other_id'):
        context.user_data['awaiting_other_id'] = False
        fwd_user = update.message.forward_from

        if fwd_user:
            saved_ids[str(fwd_user.id)] = fwd_user.username
            save_ids(saved_ids)
            await update.message.reply_text(
                f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{fwd_user.username}: {fwd_user.id}",
                reply_markup=main_keyboard()
            )
        else:
            await update.message.reply_text(
                "–≠—Ç–æ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–µ–π ID —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å.",
                reply_markup=main_keyboard()
            )

# ====== –ú–∏–Ω–∏-–≤–µ–±—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ======
class PingHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(f"Bot is running! Saved IDs: {len(saved_ids)}".encode())

    def do_HEAD(self):
        self.send_response(200)
        self.end_headers()

def run_web():
    server = HTTPServer(("0.0.0.0", PORT), PingHandler)
    print(f"Web server running on port {PORT}")  # –¥–ª—è –ª–æ–≥–æ–≤ Render
    server.serve_forever()

# ====== –ó–∞–ø—É—Å–∫ –≤–µ–±—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ======
threading.Thread(target=run_web, daemon=True).start()

# ====== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ======
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CallbackQueryHandler(button))
app.add_handler(MessageHandler(filters.TEXT | filters.COMMAND | filters.ALL, message_handler))

app.run_polling()
